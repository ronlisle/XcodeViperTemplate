The VIPER class files provide a starting scaffold.
They provide the basic structure and the linkage between files, but do not
provide any functionality. You will need to add that yourself.
I recommend that you also add the VIPER Tests to your project, and use
TDD as you add that functionality.

This template assumes that you have already added the view controller,
and that it is named ___FILEBASENAME___ViewController.

VIPER class files created:
   ___FILEBASENAME___Interactor
   ___FILEBASENAME___Presenter
   ___FILEBASENAME___Wireframe

Protocol files created:
   ___FILEBASENAME___InteractorIO
   ___FILEBASENAME___ModuleInterface
   ___FILEBASENAME___ViewInterface

The application delegate should be modified to instantiate the VIPER classes,
and call upon the wireframe to present the view controller. This can be
accomplished as shown here:

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    let appDependencies = AppDependencies()


    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {

        appDependencies.installRootViewControllerIntoWindow(window!)

        return true
    }
}

An AppDependencies file is a good way to isolate dependencies when interconnecting
the files. This can be done as shown here:

class AppDependencies {
    var wireframe = ___FILEBASENAME___Wireframe()

    init() {
        configureDependencies()
    }

    func installRootViewControllerIntoWindow(_ window: UIWindow) {
        wireframe.present___FILEBASENAME___InterfaceFromWindow(window)
    }

    func configureDependencies() {
        wireframe = ___FILEBASENAME___Wireframe()
        let dataManager = ___FILEBASENAME___DataManager()
        let presenter = ___FILEBASENAME___Presenter()
        let interactor = ___FILEBASENAME___Interactor(dataManager: dataManager)

        wireframe.___FILEBASENAME___Presenter = presenter

        interactor.output = presenter

        presenter.interactor = interactor
        presenter.wireframe = wireframe

    }
}
